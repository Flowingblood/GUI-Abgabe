swagger: "2.0"
info:
  version: "0.0.1"
  title: "Softwareergonomie Backend Server"
  contact:
    email: "matthias.bay@thm.zdh.de"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "swagger.io"
basePath: "/"
tags:
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: ""
    url: "http://swagger.io"
- name: "scope"
  description: "Operations about scopes"
  externalDocs:
    description: ""
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /user/create:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in app."
      operationId: "controllers.user_controller.createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "controllers.user_controller.createUsersWithListInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/all:
    get:
      tags:
        - "user"
      summary: "Get users"
      description: ""
      operationId: "controllers.user_controller.getUserAll"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
                $ref: "#/definitions/Users"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "controllers.user_controller.getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "controllers.user_controller.updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "controllers.user_controller.deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      scopeList:
        type: "array"
        items:
            $ref: "#/definitions/Scope"
        description: "User Scopes"
    xml:
      name: "User"
  Users:
    type: "object"
    properties:
      userContainer:
        type: "array"
        items:
            $ref: "#/definitions/User"
        description: "Container for user"
    xml:
      name: "Scope"
  Scope:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      subscope:
        type: "array"
        items:
            $ref: "#/definitions/Scope"
        description: "Subscope reference"
    xml:
      name: "Scope"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"